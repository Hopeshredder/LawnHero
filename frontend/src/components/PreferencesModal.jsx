import { useState, useEffect } from "react";
import { Modal, Box, Typography, TextField, Button } from "@mui/material";
import { updatePrefs, CreateTips } from "../Api";
import { generateTasksForYard } from "./generateTasksForYard";
import SeasonalDatePicker from "./SeasonalDatePicker";
import NumericInputField from "./NumericInputField";

export default function PreferencesModal({
  // need to autogenerate ONLY updated task instead of water and mow regardless of which preference was updated. warning for overwriting existing autogenerated tasks. batch generate on backend?
  open,
  onClose,
  yardId,
  onPreferencesSaved,
  initialPrefs,
  isNewYard,
}) {
  const [wateringInterval, setWateringInterval] = useState(2.0);
  const [fertilizingInterval, setFertilizingInterval] = useState(90);
  const [mowingInterval, setMowingInterval] = useState(7);
  const [aerationInterval, setAerationInterval] = useState(180);
  const [dethatchingInterval, setDethatchingInterval] = useState(180);
  const [wateringRate, setWateringRate] = useState(2.0);
  const [fertilizingRate, setFertilizingRate] = useState(1.0);
  const [originalPrefs, setOriginalPrefs] = useState(null);

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  // Stop dates for water/mow
  const [waterStopDate, setWaterStopDate] = useState(null);
  const [mowStopDate, setMowStopDate] = useState(null);

  // Fertilizing
  const [fertilizingDates, setFertilizingDates] = useState([]);
  const [selectedDates, setSelectedDates] = useState(
    fertilizingDates.map((d) => new Date(d))
  );

  // Aeration
  const [aerationDates, setAerationDates] = useState([]);
  const [selectedAerationDates, setSelectedAerationDates] = useState(
    aerationDates.map((d) => new Date(d))
  );

  // Dethatching
  const [dethatchingDates, setDethatchingDates] = useState([]);
  const [selectedDethatchingDates, setSelectedDethatchingDates] = useState(
    dethatchingDates.map((d) => new Date(d))
  );

  useEffect(() => {
    if (!open || !initialPrefs) return;

    const watering = isNewYard ? 2.0 : initialPrefs.watering_interval ?? 2.0;
    const mowing = isNewYard ? 7 : initialPrefs.mowing_interval ?? 7;

    setWateringInterval(watering);
    setMowingInterval(mowing);
    setFertilizingInterval(
      isNewYard ? 90 : initialPrefs.fertilizing_interval ?? 90
    );
    setAerationInterval(
      isNewYard ? 180 : initialPrefs.aeration_interval ?? 180
    );
    setDethatchingInterval(
      isNewYard ? 180 : initialPrefs.dethatching_interval ?? 180
    );
    setWateringRate(isNewYard ? 2.0 : initialPrefs.watering_rate ?? 2.0);
    setFertilizingRate(isNewYard ? 1.0 : initialPrefs.fertilizing_rate ?? 1.0);

    setWaterStopDate(initialPrefs?.stop_watering_date || null);
    setMowStopDate(initialPrefs?.stop_mowing_date || null);
    setFertilizingDates(initialPrefs?.fertilizing_dates || []);
    setAerationDates(initialPrefs?.aeration_dates || []);
    setDethatchingDates(initialPrefs?.dethatching_dates || []);

    // Only store what matters for task generation
    setOriginalPrefs({
      watering_interval: watering,
      mowing_interval: mowing,
      stop_watering_date: initialPrefs?.stop_watering_date || null,
      stop_mowing_date: initialPrefs?.stop_mowing_date || null,
      fertilizing_dates: initialPrefs?.fertilizing_dates || [],
      aeration_dates: initialPrefs?.aeration_dates || [],
      dethatching_dates: initialPrefs?.dethatching_dates || [],
    });

    setError("");
  }, [open, initialPrefs, isNewYard]);

  function hasPrefsChanged(current, original) {
    if (!original) return true;

    // Intervals
    if (
      Number(current.watering_interval) !==
        Number(original.watering_interval) ||
      Number(current.mowing_interval) !== Number(original.mowing_interval)
    )
      return true;

    // Stop dates
    if (
      (current.stop_watering_date?.toISOString() || null) !==
      (original.stop_watering_date?.toISOString() || null)
    )
      return true;

    if (
      (current.stop_mowing_date?.toISOString() || null) !==
      (original.stop_mowing_date?.toISOString() || null)
    )
      return true;

    // Seasonal dates (compare lengths and dates)
    const arrChanged = (arr1 = [], arr2 = []) => {
      if (arr1.length !== arr2.length) return true;
      return arr1.some(
        (d, i) => new Date(d).toISOString() !== new Date(arr2[i]).toISOString()
      );
    };

    if (
      arrChanged(current.fertilizing_dates, original.fertilizing_dates) ||
      arrChanged(current.aeration_dates, original.aeration_dates) ||
      arrChanged(current.dethatching_dates, original.dethatching_dates)
    )
      return true;

    return false;
  }

  const handleSavePreferences = async () => {
    if (!yardId) return;
    setLoading(true);
    setError("");

    try {
      await updatePrefs(yardId, {
        watering_interval: wateringInterval,
        fertilizing_interval: fertilizingInterval,
        mowing_interval: mowingInterval,
        aeration_interval: aerationInterval,
        dethatching_interval: dethatchingInterval,
        watering_rate: wateringRate,
        fertilizing_rate: fertilizingRate,
        stop_watering_date: waterStopDate, // need to presist on backend?
        stop_mowing_date: mowStopDate,
        fertilizing_dates: fertilizingDates,
        aeration_dates: aerationDates,
        dethatching_dates: dethatchingDates,
      });

      const prefsChanged =
        originalPrefs &&
        (Number(wateringInterval) !== Number(originalPrefs.watering_interval) ||
          Number(mowingInterval) !== Number(originalPrefs.mowing_interval));

      const shouldGenerateTasks =
        isNewYard ||
        hasPrefsChanged(
          {
            watering_interval: wateringInterval,
            mowing_interval: mowingInterval,
            stop_watering_date: waterStopDate,
            stop_mowing_date: mowStopDate,
            fertilizing_dates: fertilizingDates,
            aeration_dates: aerationDates,
            dethatching_dates: dethatchingDates,
          },
          originalPrefs
        );

      // Only generate if necessary
      if (shouldGenerateTasks) {
        await generateTasksForYard(
          { id: yardId },
          {
            stopDates: { watering: waterStopDate, mowing: mowStopDate },
            seasonalTasks: {
              fertilize: fertilizingDates.length ? fertilizingDates : undefined,
              aerate: aerationDates.length ? aerationDates : undefined,
              dethatch: dethatchingDates.length ? dethatchingDates : undefined,
            },
            prefs: {
              watering_interval: wateringInterval,
              mowing_interval: mowingInterval,
            },
          }
        );
        await CreateTips(yardId);
      }

      onPreferencesSaved?.();
      onClose();
    } catch (err) {
      setError(err.response?.data?.message || "Failed to save preferences.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (!open) return;

    const syncSelected = (sourceDates, setter) => {
      setter(sourceDates.map((d) => new Date(d)));
    };

    syncSelected(fertilizingDates, setSelectedDates);
    syncSelected(aerationDates, setSelectedAerationDates);
    syncSelected(dethatchingDates, setSelectedDethatchingDates);
  }, [open, fertilizingDates, aerationDates, dethatchingDates]);

  if (!open) return null;

  return (
    <Modal open={open} onClose={onClose}>
      <Box
        sx={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: { xs: "90%", sm: 500 },
          bgcolor: "#f9f0dd",
          borderRadius: 4,
          boxShadow: 6,
          p: { xs: 3, sm: 4 },
          display: "flex",
          flexDirection: "column",
          gap: 2,
        }}
      >
        <Typography variant="h6" color="#333" gutterBottom>
          Yard Preferences
        </Typography>

        {error && <Typography color="error">{error}</Typography>}

        <Box
          sx={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 2 }}
          data-cy="prefs-modal"
          data-yard-id={yardId}
        >
          <NumericInputField
            label="Watering Interval (days)"
            value={wateringInterval}
            onChange={setWateringInterval}
            inputProps={{ "data-cy": "wateringIntervalInput" }}
            disabled={loading}
          />
          <NumericInputField
            label="Watering Rate (in/week)"
            value={wateringRate}
            onChange={setWateringRate}
            step={0.1}
            inputProps={{ "data-cy": "wateringRateInput" }}
            disabled={loading}
          />
          <TextField
            label="Stop Watering On"
            type="date"
            value={
              waterStopDate ? waterStopDate.toISOString().split("T")[0] : ""
            }
            onChange={(e) => setWaterStopDate(new Date(e.target.value))}
            fullWidth
            disabled={loading}
            InputLabelProps={{ shrink: true }}
          />
          <NumericInputField
            label="Mowing Interval (days)"
            value={mowingInterval}
            onChange={setMowingInterval}
            inputProps={{ "data-cy": "mowingIntervalInput" }}
            disabled={loading}
          />
          <TextField
            label="Stop Mowing On"
            type="date"
            value={mowStopDate ? mowStopDate.toISOString().split("T")[0] : ""}
            onChange={(e) => setMowStopDate(new Date(e.target.value))}
            fullWidth
            disabled={loading}
            InputLabelProps={{ shrink: true }}
          />
          <NumericInputField
            label="Fertilizing Rate (lbs/1000sqft)"
            value={fertilizingRate}
            onChange={setFertilizingRate}
            step={0.1}
            inputProps={{ "data-cy": "fertilizingRateInput" }}
            disabled={loading}
          />
        </Box>
        <Box sx={{ display: "flex", flexDirection: "column", gap: 2, mt: 2 }}>
          <SeasonalDatePicker
            label="Fertilizing Dates"
            dates={fertilizingDates}
            setDates={setFertilizingDates}
            disabled={loading}
          />
          <SeasonalDatePicker
            label="Aeration Dates"
            dates={aerationDates}
            setDates={setAerationDates}
            disabled={loading}
          />
          <SeasonalDatePicker
            label="Dethatching Dates"
            dates={dethatchingDates}
            setDates={setDethatchingDates}
            disabled={loading}
          />
        </Box>
        <Box
          sx={{ display: "flex", justifyContent: "flex-end", gap: 2, mt: 3 }}
        >
          <Button variant="outlined" onClick={onClose} disabled={loading}>
            Cancel
          </Button>
          <Button
            variant="contained"
            sx={{
              backgroundColor: "#a14525",
              "&:hover": { backgroundColor: "#c65b3b" },
            }}
            onClick={handleSavePreferences}
            disabled={loading}
          >
            {loading ? "Generating Tasks..." : "Save Preferences"}
          </Button>
        </Box>
      </Box>
    </Modal>
  );
}
