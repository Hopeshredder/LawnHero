import { useState, useEffect } from "react";
import { Modal, Box, Typography, TextField, Button } from "@mui/material";
import { updatePrefs } from "../Api";
import { generateTasksForYard } from "./generateTasksForYard";
import SeasonalDatePicker from "./SeasonalDatePicker";
import NumericInputField from "./NumericInputField";

export default function PreferencesModal({
  // warning for overwriting existing autogenerated tasks, only regenerate if changed, check if seasonals exist before autogenerating (always generate if dates select). batch generate on backend? dont generate the same task on the same day
  open,
  onClose,
  yardId,
  onPreferencesSaved,
  initialPrefs,
}) {
  const [wateringInterval, setWateringInterval] = useState(2.0);
  const [fertilizingInterval, setFertilizingInterval] = useState(90);
  const [mowingInterval, setMowingInterval] = useState(7);
  const [aerationInterval, setAerationInterval] = useState(180);
  const [dethatchingInterval, setDethatchingInterval] = useState(180);
  const [wateringRate, setWateringRate] = useState(2.0);
  const [fertilizingRate, setFertilizingRate] = useState(1.0);

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  // Stop dates for water/mow
  const [waterStopDate, setWaterStopDate] = useState(null);
  const [mowStopDate, setMowStopDate] = useState(null);

  // Fertilizing
  const [fertilizingDates, setFertilizingDates] = useState([]);
  const [selectedDates, setSelectedDates] = useState(
    fertilizingDates.map((d) => new Date(d))
  );

  // Aeration
  const [aerationDates, setAerationDates] = useState([]);
  const [selectedAerationDates, setSelectedAerationDates] = useState(
    aerationDates.map((d) => new Date(d))
  );

  // Dethatching
  const [dethatchingDates, setDethatchingDates] = useState([]);
  const [selectedDethatchingDates, setSelectedDethatchingDates] = useState(
    dethatchingDates.map((d) => new Date(d))
  );

  // Reset fields when opening
  useEffect(() => {
    if (!open) return;

    setWateringInterval(initialPrefs?.watering_interval ?? 2.0);
    setFertilizingInterval(initialPrefs?.fertilizing_interval ?? 90);
    setMowingInterval(initialPrefs?.mowing_interval ?? 7);
    setAerationInterval(initialPrefs?.aeration_interval ?? 180);
    setDethatchingInterval(initialPrefs?.dethatching_interval ?? 180);
    setWateringRate(initialPrefs?.watering_rate ?? 2.0);
    setFertilizingRate(initialPrefs?.fertilizing_rate ?? 1.0);

    setError("");
  }, [open, initialPrefs]);

  const handleSavePreferences = async () => {
    if (!yardId) return;
    setLoading(true);
    setError("");

    try {
      await updatePrefs(yardId, {
        watering_interval: wateringInterval,
        fertilizing_interval: fertilizingInterval,
        mowing_interval: mowingInterval,
        aeration_interval: aerationInterval,
        dethatching_interval: dethatchingInterval,
        watering_rate: wateringRate,
        fertilizing_rate: fertilizingRate,
        stop_watering_date: waterStopDate,
        stop_mowing_date: mowStopDate,
        fertilizing_dates: fertilizingDates,
        aeration_dates: aerationDates,
        dethatching_dates: dethatchingDates,
      });

      // Generate tasks immediately with custom dates
      await generateTasksForYard(
        { id: yardId },
        {
          stopDates: { watering: waterStopDate, mowing: mowStopDate },
          seasonalTasks: {
            fertilize: fertilizingDates.length ? fertilizingDates : undefined,
            aerate: aerationDates.length ? aerationDates : undefined,
            dethatch: dethatchingDates.length ? dethatchingDates : undefined,
          },
          prefs: {
            watering_interval: wateringInterval,
            mowing_interval: mowingInterval,
          },
        }
      );
      onPreferencesSaved?.();
      onClose();
    } catch (err) {
      setError(err.response?.data?.message || "Failed to save preferences.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (!open) return;

    const syncSelected = (sourceDates, setter) => {
      setter(sourceDates.map((d) => new Date(d)));
    };

    syncSelected(fertilizingDates, setSelectedDates);
    syncSelected(aerationDates, setSelectedAerationDates);
    syncSelected(dethatchingDates, setSelectedDethatchingDates);
  }, [open, fertilizingDates, aerationDates, dethatchingDates]);

  if (!open) return null;

  return (
    <Modal open={open} onClose={onClose}>
      <Box
        sx={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: { xs: "90%", sm: 500 },
          bgcolor: "#f9f0dd",
          borderRadius: 4,
          boxShadow: 6,
          p: { xs: 3, sm: 4 },
          display: "flex",
          flexDirection: "column",
          gap: 2,
        }}
      >
        <Typography variant="h6" color="#333" gutterBottom>
          Yard Preferences
        </Typography>

        {error && <Typography color="error">{error}</Typography>}

        <Box
          sx={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 2 }}
          data-cy="prefs-modal"
          data-yard-id={yardId}
        >
          <NumericInputField
            label="Watering Interval (days)"
            value={wateringInterval}
            onChange={setWateringInterval}
            inputProps={{ "data-cy": "wateringIntervalInput" }}
            disabled={loading}
          />
          <NumericInputField
            label="Watering Rate (in/week)"
            value={wateringRate}
            onChange={setWateringRate}
            step={0.1}
            inputProps={{ "data-cy": "wateringRateInput" }}
            disabled={loading}
          />
          <TextField
            label="Stop Watering On"
            type="date"
            value={
              waterStopDate ? waterStopDate.toISOString().split("T")[0] : ""
            }
            onChange={(e) => setWaterStopDate(new Date(e.target.value))}
            fullWidth
            disabled={loading}
            InputLabelProps={{ shrink: true }}
          />
          <NumericInputField
            label="Mowing Interval (days)"
            value={mowingInterval}
            onChange={setMowingInterval}
            inputProps={{ "data-cy": "mowingIntervalInput" }}
            disabled={loading}
          />
          <TextField
            label="Stop Mowing On"
            type="date"
            value={mowStopDate ? mowStopDate.toISOString().split("T")[0] : ""}
            onChange={(e) => setMowStopDate(new Date(e.target.value))}
            fullWidth
            disabled={loading}
            InputLabelProps={{ shrink: true }}
          />
          <NumericInputField
            label="Fertilizing Rate (lbs/1000sqft)"
            value={fertilizingRate}
            onChange={setFertilizingRate}
            step={0.1}
            inputProps={{ "data-cy": "fertilizingRateInput" }}
            disabled={loading}
          />
        </Box>
        <Box sx={{ display: "flex", flexDirection: "column", gap: 2, mt: 2 }}>
          <SeasonalDatePicker
            label="Fertilizing Dates"
            dates={fertilizingDates}
            setDates={setFertilizingDates}
            disabled={loading}
          />
          <SeasonalDatePicker
            label="Aeration Dates"
            dates={aerationDates}
            setDates={setAerationDates}
            disabled={loading}
          />
          <SeasonalDatePicker
            label="Dethatching Dates"
            dates={dethatchingDates}
            setDates={setDethatchingDates}
            disabled={loading}
          />
        </Box>
        <Box
          sx={{ display: "flex", justifyContent: "flex-end", gap: 2, mt: 3 }}
        >
          <Button variant="outlined" onClick={onClose} disabled={loading}>
            Cancel
          </Button>
          <Button
            variant="contained"
            sx={{
              backgroundColor: "#a14525",
              "&:hover": { backgroundColor: "#c65b3b" },
            }}
            onClick={handleSavePreferences}
            disabled={loading}
          >
            {loading ? "Generating Tasks..." : "Save Preferences"}
          </Button>
        </Box>
      </Box>
    </Modal>
  );
}
