import { useState, useEffect } from "react";
import {
  Modal,
  Box,
  Typography,
  TextField,
  Button,
  Collapse,
} from "@mui/material";
import { updatePrefs } from "../Api";
import { generateTasksForYard } from "./generateTasksForYard";
import { DayPicker } from "react-day-picker";
import "react-day-picker/dist/style.css";

export default function PreferencesModal({
  // warning for overwriting existing autogenerated tasks, only regenerate if changed, check if seasonals exist before autogenerating (always generate if dates select)
  open,
  onClose,
  yardId,
  onPreferencesSaved,
  initialPrefs,
}) {
  const [wateringInterval, setWateringInterval] = useState(2.0);
  const [fertilizingInterval, setFertilizingInterval] = useState(90);
  const [mowingInterval, setMowingInterval] = useState(7);
  const [aerationInterval, setAerationInterval] = useState(180);
  const [dethatchingInterval, setDethatchingInterval] = useState(180);
  const [wateringRate, setWateringRate] = useState(2.0);
  const [fertilizingRate, setFertilizingRate] = useState(1.0);

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  // Stop dates for water/mow
  const [waterStopDate, setWaterStopDate] = useState(null);
  const [mowStopDate, setMowStopDate] = useState(null);

  // Fertilizing
  const [fertilizingDates, setFertilizingDates] = useState([]);
  const [selectedDates, setSelectedDates] = useState(
    fertilizingDates.map((d) => new Date(d))
  );
  const [openFert, setOpenFert] = useState(false);

  // Aeration
  const [aerationDates, setAerationDates] = useState([]);
  const [selectedAerationDates, setSelectedAerationDates] = useState(
    aerationDates.map((d) => new Date(d))
  );
  const [openAeration, setOpenAeration] = useState(false);

  // Dethatching
  const [dethatchingDates, setDethatchingDates] = useState([]);
  const [selectedDethatchingDates, setSelectedDethatchingDates] = useState(
    dethatchingDates.map((d) => new Date(d))
  );
  const [openDethatch, setOpenDethatch] = useState(false);

  const yard = { id: yardId };

  // Reset fields when opening
  useEffect(() => {
    if (!open) return;

    setWateringInterval(initialPrefs?.watering_interval ?? 2.0);
    setFertilizingInterval(initialPrefs?.fertilizing_interval ?? 90);
    setMowingInterval(initialPrefs?.mowing_interval ?? 7);
    setAerationInterval(initialPrefs?.aeration_interval ?? 180);
    setDethatchingInterval(initialPrefs?.dethatching_interval ?? 180);
    setWateringRate(initialPrefs?.watering_rate ?? 2.0);
    setFertilizingRate(initialPrefs?.fertilizing_rate ?? 1.0);

    setError("");
  }, [open, initialPrefs]);

  const handleSavePreferences = async () => {
    if (!yardId) return;
    setLoading(true);
    setError("");

    try {
      await updatePrefs(yardId, {
        watering_interval: wateringInterval,
        fertilizing_interval: fertilizingInterval,
        mowing_interval: mowingInterval,
        aeration_interval: aerationInterval,
        dethatching_interval: dethatchingInterval,
        watering_rate: wateringRate,
        fertilizing_rate: fertilizingRate,
        stop_watering_date: waterStopDate,
        stop_mowing_date: mowStopDate,
        fertilizing_dates: fertilizingDates,
        aeration_dates: aerationDates,
        dethatching_dates: dethatchingDates,
      });

      // Generate tasks immediately with custom dates
      await generateTasksForYard(yard, {
        stopDates: { watering: waterStopDate, mowing: mowStopDate },
        seasonalTasks: {
          fertilize: fertilizingDates.length ? fertilizingDates : undefined,
          aerate: aerationDates.length ? aerationDates : undefined,
          dethatch: dethatchingDates.length ? dethatchingDates : undefined,
        },
        prefs: {
          watering_interval: wateringInterval,
          mowing_interval: mowingInterval,
        },
      });
      onPreferencesSaved?.();
      onClose();
    } catch (err) {
      setError(err.response?.data?.message || "Failed to save preferences.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (!open) return;
    setSelectedDates(fertilizingDates.map((d) => new Date(d)));
  }, [open, fertilizingDates]);

  const handleConfirmFert = () => {
    setFertilizingDates(
      selectedDates.map((date) => date.toISOString().split("T")[0])
    );
    setOpenFert(false);
  };

  useEffect(() => {
    if (!open) return;
    setSelectedAerationDates(aerationDates.map((d) => new Date(d)));
  }, [open, aerationDates]);

  const handleConfirmAeration = () => {
    setAerationDates(
      selectedAerationDates.map((date) => date.toISOString().split("T")[0])
    );
    setOpenAeration(false);
  };

  useEffect(() => {
    if (!open) return;
    setSelectedDethatchingDates(dethatchingDates.map((d) => new Date(d)));
  }, [open, dethatchingDates]);

  const handleConfirmDethatch = () => {
    setDethatchingDates(
      selectedDethatchingDates.map((date) => date.toISOString().split("T")[0])
    );
    setOpenDethatch(false);
  };

  if (!open) return null;

  return (
    <Modal open={open} onClose={onClose}>
      <Box
        sx={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: { xs: "90%", sm: 500 },
          bgcolor: "#f9f0dd",
          borderRadius: 4,
          boxShadow: 6,
          p: { xs: 3, sm: 4 },
          display: "flex",
          flexDirection: "column",
          gap: 2,
        }}
      >
        <Typography variant="h6" color="#333" gutterBottom>
          Yard Preferences
        </Typography>

        {error && <Typography color="error">{error}</Typography>}

        <Box
          sx={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 2 }}
          data-cy="prefs-modal"
          data-yard-id={yardId}
        >
          <TextField
            inputProps={{ "data-cy": "wateringIntervalInput" }}
            label="Watering Interval (days)"
            type="number"
            value={wateringInterval}
            onChange={(e) => setWateringInterval(parseFloat(e.target.value))}
            fullWidth
            disabled={loading}
            InputLabelProps={{
              sx: {
                whiteSpace: "normal",
                overflow: "visible",
                textOverflow: "clip",
                lineHeight: "1.2em",
              },
            }}
          />
          <TextField
            inputProps={{ "data-cy": "wateringRateInput" }}
            label="Watering Rate (in/week)"
            type="number"
            step="0.1"
            value={wateringRate}
            onChange={(e) => setWateringRate(parseFloat(e.target.value))}
            fullWidth
            disabled={loading}
            InputLabelProps={{
              sx: {
                whiteSpace: "normal",
                overflow: "visible",
                textOverflow: "clip",
                lineHeight: "1.2em",
              },
            }}
          />
          <TextField
            label="Stop Watering On"
            type="date"
            value={
              waterStopDate ? waterStopDate.toISOString().split("T")[0] : ""
            }
            onChange={(e) => setWaterStopDate(new Date(e.target.value))}
            fullWidth
            disabled={loading}
            InputLabelProps={{
              shrink: true,
            }}
          />
          <TextField
            inputProps={{ "data-cy": "mowingIntervalInput" }}
            label="Mowing Interval (days)"
            type="number"
            value={mowingInterval}
            onChange={(e) => setMowingInterval(parseInt(e.target.value, 10))}
            fullWidth
            disabled={loading}
            InputLabelProps={{
              sx: {
                whiteSpace: "normal",
                overflow: "visible",
                textOverflow: "clip",
                lineHeight: "1.2em",
              },
            }}
          />
          <TextField
            label="Stop Mowing On"
            type="date"
            value={mowStopDate ? mowStopDate.toISOString().split("T")[0] : ""}
            onChange={(e) => setMowStopDate(new Date(e.target.value))}
            fullWidth
            disabled={loading}
            InputLabelProps={{
              shrink: true,
            }}
          />
          {/* <TextField
            inputProps={{ "data-cy": "fertilizingIntervalInput" }}
            label="Fertilizing Interval (days)"
            type="number"
            value={fertilizingInterval}
            onChange={(e) =>
              setFertilizingInterval(parseInt(e.target.value, 10))
            }
            fullWidth
            disabled={loading}
            InputLabelProps={{
              sx: {
                whiteSpace: "normal",
                overflow: "visible",
                textOverflow: "clip",
                lineHeight: "1.2em",
              },
            }}
          /> */}
          <TextField
            inputProps={{ "data-cy": "fertilizingRateInput" }}
            label="Fertilizing Rate (lbs/1000sqft)"
            type="number"
            step="0.1"
            value={fertilizingRate}
            onChange={(e) => setFertilizingRate(parseFloat(e.target.value))}
            fullWidth
            disabled={loading}
            InputLabelProps={{
              sx: {
                whiteSpace: "normal",
                overflow: "visible",
                textOverflow: "clip",
                lineHeight: "1.2em",
              },
            }}
          />
          {/* <TextField
            inputProps={{ "data-cy": "aerationIntervalInput" }}
            label="Aeration Interval (days)"
            type="number"
            value={aerationInterval}
            onChange={(e) => setAerationInterval(parseInt(e.target.value, 10))}
            fullWidth
            disabled={loading}
            InputLabelProps={{
              sx: {
                whiteSpace: "normal",
                overflow: "visible",
                textOverflow: "clip",
                lineHeight: "1.2em",
              },
            }}
          /> */}
          {/* <TextField
            inputProps={{ "data-cy": "dethatchingIntervalInput" }}
            label="Dethatching Interval (days)"
            type="number"
            value={dethatchingInterval}
            onChange={(e) =>
              setDethatchingInterval(parseInt(e.target.value, 10))
            }
            fullWidth
            disabled={loading}
            InputLabelProps={{
              sx: {
                whiteSpace: "normal",
                overflow: "visible",
                textOverflow: "clip",
                lineHeight: "1.2em",
              },
            }}
          /> */}
        </Box>
        <Box sx={{ display: "flex", flexDirection: "column", gap: 2, mt: 2 }}>
          {/* --- Fertilizing Dates --- */}
          <Box sx={{ mb: 2 }}>
            <Typography variant="subtitle1" gutterBottom>
              Fertilizing Dates:{" "}
              {fertilizingDates.map((date, i) => {
                const d = new Date(date);
                return (
                  <span key={i} style={{ marginRight: 6 }}>
                    {`${String(d.getMonth() + 1).padStart(2, "0")}-${String(
                      d.getDate()
                    ).padStart(2, "0")},`}
                  </span>
                );
              })}
            </Typography>

            <Button
              variant="outlined"
              size="small"
              onClick={() => setOpenFert((prev) => !prev)}
              sx={{ mb: 1 }}
            >
              {openFert ? "Hide Calendar" : "Select Dates"}
            </Button>

            <Collapse in={openFert}>
              <DayPicker
                mode="multiple"
                selected={selectedDates}
                onSelect={setSelectedDates}
              />
              <Button
                variant="contained"
                size="small"
                onClick={handleConfirmFert}
                sx={{ mt: 1 }}
              >
                Done
              </Button>
            </Collapse>
          </Box>
          {/* --- Aeration Dates --- */}
          <Box sx={{ mb: 2 }}>
            <Typography variant="subtitle1" gutterBottom>
              Aeration Dates:{" "}
              {aerationDates.map((date, i) => {
                const d = new Date(date);
                return (
                  <span key={i} style={{ marginRight: 6 }}>
                    {`${String(d.getMonth() + 1).padStart(2, "0")}-${String(
                      d.getDate()
                    ).padStart(2, "0")}`}
                  </span>
                );
              })}
            </Typography>

            <Button
              variant="outlined"
              size="small"
              onClick={() => setOpenAeration((prev) => !prev)}
              sx={{ mb: 1 }}
            >
              {openAeration ? "Hide Calendar" : "Select Dates"}
            </Button>

            <Collapse in={openAeration}>
              <DayPicker
                mode="multiple"
                selected={selectedAerationDates}
                onSelect={setSelectedAerationDates}
              />
              <Button
                variant="contained"
                size="small"
                onClick={handleConfirmAeration}
                sx={{ mt: 1 }}
              >
                Done
              </Button>
            </Collapse>
          </Box>

          {/* --- Dethatching Dates --- */}
          <Box sx={{ mb: 2 }}>
            <Typography variant="subtitle1" gutterBottom>
              Dethatching Dates:{" "}
              {dethatchingDates.map((date, i) => {
                const d = new Date(date);
                return (
                  <span key={i} style={{ marginRight: 6 }}>
                    {`${String(d.getMonth() + 1).padStart(2, "0")}-${String(
                      d.getDate()
                    ).padStart(2, "0")}`}
                  </span>
                );
              })}
            </Typography>

            <Button
              variant="outlined"
              size="small"
              onClick={() => setOpenDethatch((prev) => !prev)}
              sx={{ mb: 1 }}
            >
              {openDethatch ? "Hide Calendar" : "Select Dates"}
            </Button>

            <Collapse in={openDethatch}>
              <DayPicker
                mode="multiple"
                selected={selectedDethatchingDates}
                onSelect={setSelectedDethatchingDates}
              />
              <Button
                variant="contained"
                size="small"
                onClick={handleConfirmDethatch}
                sx={{ mt: 1 }}
              >
                Done
              </Button>
            </Collapse>
          </Box>
        </Box>

        <Box
          sx={{ display: "flex", justifyContent: "flex-end", gap: 2, mt: 3 }}
        >
          <Button variant="outlined" onClick={onClose} disabled={loading}>
            Cancel
          </Button>
          <Button
            variant="contained"
            sx={{
              backgroundColor: "#a14525",
              "&:hover": { backgroundColor: "#c65b3b" },
            }}
            onClick={handleSavePreferences}
            disabled={loading}
          >
            {loading ? "Saving..." : "Save Preferences"}
          </Button>
        </Box>
      </Box>
    </Modal>
  );
}
